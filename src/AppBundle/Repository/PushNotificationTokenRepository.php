<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Advert;
use AppBundle\Entity\PushNotificationToken;

/**
 * PushNotificationTokenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PushNotificationTokenRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @return PushNotificationToken[]
     */
    public function getActiveAndEnabled()
    {
        return $this->findBy(['active' => 1, 'enabled' => 1]);
    }

    /**
     * @param PushNotificationToken $token
     * @param array|null $filters
     * @return Advert[]
     */
    public function getUnnotifiedAdvertsForToken($token)
    {
        $oneHourAgo = (new \DateTime())->sub((new \DateInterval('PT1H')))->format('Y-m-d H:i:s');
        $ids = $this->createQueryBuilder('qb')
            ->select('ad.id')
            ->from('AppBundle:PushNotificationToken', 'pnt')
            ->leftJoin('pnt.adverts', 'ad')
            ->andWhere('pnt.token = :token')
            ->andWhere('ad.createdAt >= :maxAge');

        $qb = $this->createQueryBuilder('qb2');
        $qb->select('a')
            ->from('AppBundle:Advert', 'a')
            ->andWhere('a.createdAt >= :maxAge')
            ->andWhere($qb->expr()->notIn('a.id', $ids->getDQL()))
            ->setParameter('token', $token->getToken())
            ->setParameter('maxAge', $oneHourAgo);

        $filters = $token->getFilters();
        if (!empty($filters)) {
            foreach ($filters as $type => $filter) {
                switch ($type) {
                    case 'price':
                        if (isset($filter['lte'])) {
                            $qb->andWhere('(a.price IS NULL OR a.price <= :ltePrice)');
                            $qb->setParameter('ltePrice', $filter['lte']);
                        }
                        if (isset($filter['gte'])) {
                            $qb->andWhere('(a.price IS NULL OR a.price >= :gtePrice)');
                            $qb->setParameter('gtePrice', $filter['gte']);
                        }
                        break;
                    case 'disposition':
                        if (!empty($filter)) {
                            $qb->leftJoin('a.property', 'p');
                            $qb->leftJoin('p.disposition', 'pd');
                            $qb->andWhere('pd.code IN (:dispositionCodes)');
                            $qb->setParameter('dispositionCodes', $filter);
                        }
                        break;
                }
            }
        }

        $adverts = $qb->getQuery()->getResult();
        return $adverts;
    }
}
